{"meta":{"title":"GuoWei's blog","subtitle":"welcome to my gardon","description":"这是郭伟的小站，你可以在这儿发现软件评测，影评，语言教程等等丰富的资料。","author":"GuoWei","url":"https://freedgw.github.io","root":"/freedgw.github.io/"},"pages":[],"posts":[{"title":"","slug":"语雀,让共享无处不在","date":"2019-08-20T13:21:19.980Z","updated":"2019-08-20T13:19:28.523Z","comments":true,"path":"2019/08/20/语雀,让共享无处不在/","link":"","permalink":"https://freedgw.github.io/2019/08/20/语雀,让共享无处不在/","excerpt":"","text":"语雀,让共享无处不在语雀是什么？「语雀」是一个「知识创作与分享工具」，孵化自 蚂蚁金服 ，是 体验科技 理念下的一款创新产品，已是 5万+ 阿里员工进行文档编写、知识沉淀的标配。一开始，我们只是希望给工程师提供一个写技术文档的工具，达成「文由汝心生、笔墨语雀来」这个小目标。在研制产品过程中，我们发现身边的每个人、每个团队、每个组织都有很多知识，但一直以来缺少一个好用的工具让这些知识不只是留在每个人的大脑或电脑里，还可以被记录、分享和交流。带着这颗初心，我们觉得语雀不应止步于服务工程师，应该致力于为每个想表达所思所想的人提供一款顺手的工具，让知识能得以记录和传播，让人们可以在「语雀」中平等快乐地创作和交流知识，让在小的个体也可以拥有自己的知识库。「语」字来源于「言语」，泛指人类沟通交流的方式，代表产品核心在于让人与人之间更有效地进行交流，承载交流过程中需要用到的以文本、图画、表格等典型载体的知识。「雀」字来源于「云雀」，也即《从百草园到三味书屋》中的叫天子，一种轻灵活泼的杭州本土小鸟，在诗人雪莱的杰作《致云雀》中象征“欢乐、光明、美丽”，代表产品风格为「轻灵美观」。语雀，一只能言善语的云雀，伴随大家在「知识的世界里」欢快翱翔。 与其他平台不同？语雀自2018年上线以来，陆续更新了许多功能以使得其变得更加易用，目前，语雀的完整功能需要在pc浏览器完成，其他平台可查看但功能受限。语雀提供了完全免费且不夹带任何广告的创作平台，而你可以利用它所做的事不止如此。它支持markdown语法，甚至更进一步的支持了latex语法，这对代码与数学公式的书写提供了无可比拟的体验。在创建项目后，你可以创建文档，在文档中可插入视频，图片，链接，甚至pdf等文件。 个人工作台界面：功能丰富的文本编辑器： 支持latex输入公式：嵌入markdown语法，可直接用markdown创作；文档翻译功能： 在文档中直接插入gif动图，视频 插入doc,pdf等文档Surface_flux_evolution_constraints_for_flux_transp.pdf太阳周期python绘图代码初级.docx可通过分享链接让他人直接下载，并具有预览功能你也可以固定几个文档作为云空间，以在所有设备上通过语雀接触到这些大量的文件，暂时的我还没有发现语雀对云空间存储容量的限制 文档大纲功能接下来便是语雀强大的共享协同功能，我们可以在工作台建立团队邀请他人加入，接下来能做的正如那些协同软件所能帮助你的，众人同时编辑一份文档，如果你想找回之前的某个版本，这也无比容易，语雀提供了历史功能，在这里你能看到成员何时对这些文档作了修改，我想这是一个非常实用的功能 如上便是我对语雀使用的简单介绍，作为蚂蚁金服孵化的一个协作平台，我想它会走的更远，而对我们来说，则是拥有了一个强大的工具，而这一切都是免费的。当然，更多的功能我在此不能一一详细介绍，它在等待你的发掘。依托于蚂蚁金服，它提供了优秀的安全性，对我们个人用户而言无疑也是让人安心的，隐私问题频发的当下我们的信息如何保障是过于复杂的事情，我们应该将我们的信息交予谁?依托蚂蚁金服的基础设施，虽然是一个内容服务，但享用的是金融服务的基础设施，安全可靠： 数据加密存储，即便是语雀的研发人员，未经用户许可也无法查看私密文档的内容 文档发布历史永久保存，采用蚂蚁金服的基础存储设施，永远不会丢失 完善的编辑流程，使得极端情况下（浏览器崩溃、断网等）最多只丢失 1 分钟内的内容 完整的操作日志使得团队下任何危险操作都有迹可循，并且支持快速恢复 所以，语雀会成为你一部分的可能性吗？网址链接：链接暂时没有任何平台app的推出，pc浏览器具有完整功能,现已更新微信小程序","categories":[],"tags":[]},{"title":"厚墨-予阅读以深度","slug":"厚墨-予阅读以深度","date":"2019-08-19T16:00:00.000Z","updated":"2019-08-20T05:07:00.965Z","comments":true,"path":"2019/08/20/厚墨-予阅读以深度/","link":"","permalink":"https://freedgw.github.io/2019/08/20/厚墨-予阅读以深度/","excerpt":"厚墨，是安卓平台上的一款阅读APP，其秉持了高度简洁的设计风格。从界面设计上它已超越了一众布局冗杂的app,而更强大的，则是它完全免费的让你享受到无广告的出版书阅读体验。","text":"厚墨，是安卓平台上的一款阅读APP，其秉持了高度简洁的设计风格。从界面设计上它已超越了一众布局冗杂的app,而更强大的，则是它完全免费的让你享受到无广告的出版书阅读体验。 厚墨-予阅读以深度厚墨，是安卓平台上的一款阅读APP，其秉持了高度简洁的设计风格。从界面设计上它已超越了一众布局冗杂的app,而更强大的，则是它完全免费的让你享受到无广告的出版书阅读体验。当然它也包括了网络小说的书源，但你可以完全将这些元素剔除在外。 界面书架 我们选择加入书架的书籍会显示在这个界面，方面阅读。 发现 此界面的操作占据软件使用的绝大部分，我将为大家一个一个详细说明。 本机文件首先是本机文件，厚墨支持以下三种格式文件 epub mobi azw3 这三种文件格式基本上是在kindle体验最为良好的书籍格式，选择本机文件后厚墨会直接在你的手机里搜索这三种格式的文件，你可以将搜索的相应文件加入到书架方便阅读。 WIFI传书进入该选项后，厚墨会给出一串传输地址，在电脑浏览器中输入该地址，可以向厚墨直接传输支持的格式文件（需要连接WIFI)： 书源厚墨的灵魂功能，所谓书源，即网友通过正则表达式等规则包装和改造小说网站界面，制作成成可直接导入厚墨里的格式，厚墨在识别到书源后会自动利用这些规则来显示这些书籍，从而带来纯净的阅读体验。 具体的操作流程可见下方gif： 因为我已经导入过书源，所以可看到我的书源商店里面的书源信息，新用户需要进入书源仓库里输入暗码获得制作好的书源： 我的书源： 可看到 开启与关闭按钮，长按直接删除 在这里如果你只想阅读出版类书籍的话，可按照书源左下角的提示出版类条目选择安装并开启 右上角加号进入书源商店，可管理所有书源，包括安装与卸载： 点击右上角设置，进入书源仓库，在这里输入暗码对接已有的仓库，现有的5个暗码： 1212，2000，2333，9713，9251 输入框部分有提示，输入对应数字就可 搜索接下来介绍的就是搜索功能，在这里你可以直接搜索书名或者作者，稍微等待一下就可以看到搜索结果。如下所示： 搜索书籍名：《追忆似水年华》，《奥德赛》 加入书架后面方便后面阅读。 搜索作者名：贾平凹 可以看到找到了贾平凹的代表作品，当书源较少时搜索速度很快。 排行排行界面其实可以看作书籍的浏览界面，在这里你可以直观地看到详细的分类，适合发现你所未熟悉的内容领域，书源涉及领域广泛，包括了东西方经典名著，期刊杂志，中医古籍等等中多方面的内容，你甚至可以在这上面读近期的《读者》，《意林》，里面的插图也能正常显示，阅读体验颇佳，甚有梦回高中之意。 RSS订阅资讯类信息，选你所想，除了本身提供适配的一些站点外，你也可以直接订阅你感兴趣的频道的rss地址： 设置如果你想摒弃rss带来的咨询对你的干扰，只想纯粹的阅读，那么你可以在设置里关闭这一选项 接下来我们要看一下厚墨的阅读体验，我们打开书架的一本书： 沉浸式的状态栏，中央轻点呼出目录，上划可看到完整目录；排版选项可调整字号与行距间距。 主题选项可以选择阅读背景，模板不多，夜间模式足够实用，选择右上角的加号可以进行更进一步的定制，包括背景的rgb色值,也可以直接选择纯色系的图片作为背景。 如果想要离线阅读直接点击下方的缓存按钮即可。 阅读设置里可以设置翻页方式及其它页面选项： 到此，关于厚墨的基本功能我已经作出详细的说明，这些已经足够满足大多人的使用，如果你想拥有同步功能或者云端空间及其它服务，你可以选择付费订阅高级功能支持作者。 我们可以选择微信读书，网易蜗牛阅读等来在闲暇时间阅读，但它们往往有时间的限制和冗余的服务，那么何不尝试这一款厚墨作为你的新选择呢？它没有任何广告，且书源的高度可定制化意味着你也可以学习制作属于你自己的书源，对epub,mobi,azw3的良好支持也是它的优势之一，诚然它在阅读上还没做到标注，笔记，翻译的丰富功能，但阅读有时候所需的不就是一种简单的纯粹的环境吗？关于电子书与实体书的争论从未中断过，但电子书的便携性确实改变了我们的阅读方式，仪式感的阅读究竟是不是一个伪命题呢，我们选择愈多干扰愈多，所以，配置你的独一无二的厚墨并让它与你为伴吧。 下载地址： https://www.coolapk.com/apk/cn.deepink.reader","categories":[{"name":"安卓软件","slug":"安卓软件","permalink":"https://freedgw.github.io/categories/安卓软件/"}],"tags":[{"name":"阅读","slug":"阅读","permalink":"https://freedgw.github.io/tags/阅读/"},{"name":"APP","slug":"APP","permalink":"https://freedgw.github.io/tags/APP/"}]},{"title":"探记—记录你的生活轨迹","slug":"探记—记录你的生活轨迹","date":"2019-08-19T16:00:00.000Z","updated":"2019-08-20T05:07:06.815Z","comments":true,"path":"2019/08/20/探记—记录你的生活轨迹/","link":"","permalink":"https://freedgw.github.io/2019/08/20/探记—记录你的生活轨迹/","excerpt":"探记是一款专注于个人记录的软件。它将帮助你做到：写日记，记笔记，生活开支记账，待办提醒，生活目标打卡，习惯养成，倒数纪念日，照片，走路步数等等","text":"探记是一款专注于个人记录的软件。它将帮助你做到：写日记，记笔记，生活开支记账，待办提醒，生活目标打卡，习惯养成，倒数纪念日，照片，走路步数等等 探记—记录你的生活轨迹探记是什么探记是一款专注于个人记录的软件。它将帮助你做到：写日记，记笔记，生活开支记账，待办提醒，生活目标打卡，习惯养成，倒数纪念日，照片，走路步数等等，开发者还在不断加入更多的实用功能以使它变得更加完善，在做到这些丰富功能的同时它也保持了简洁清新不冗杂的交互界面。以下由我带你探索探记现阶段的使用，如果它正是你需要的，那么你将得到一个亲密的生活助手而不必去为了这些功能在应用商店筛选那些条目众多的应用。 进入软件时素雅的过渡界面： 背景中的词云显示了探记已拥有的或计划中开发的功能，可以发现其囊括了我们日常生活中会经常使用的大部分需要。 进入软件直接通过手机号注册账号，在这里可以选择同微信，QQ以及微博相关联，以后登陆账号的时候可直接通过第三方软件授权登录。 可在安全设置里打开数字密码，设置完成数字密码后可同时开启指纹解锁，兼顾安全与快速。 点击软件下侧状态栏中央的加号，可选择创建多种任务： 需要说明的时，后期还会加入例如生理期记录和课程表等更多实用的功能。所以，让我们一起期待探记变得更强大多能吧！ 小记可以记录200字以内的灵感想法，短暂的灵光一闪或以备遗忘的消息可以记录在这里。 来看看最终的效果图吧： 长文长文选项里允许我们输入更多的文字，且包括了封面和标题的设置，你可以在这里创作你自己的故事。只是现在功能还相对简陋，希望后面可以支持更加丰富的背景或格式选项。 成果实例： 链接收藏一些有用的网站，这个对我真的是特别有用，平常在搜集资料的时候会浏览大量网页才能找到有效内容，而寄存这些内容的网站往往都是一个个特别实用的资源宝藏，这时我喜欢将它们分门别类收集起来以供之后的需要： 所以这就像一个脱离了网页的书签收藏夹，将那些发现的宝藏网址都存在这里吧！在这里网址可以直接点击进入，如果只是做简单的查看的话就不用再复制到浏览器中。在上面你也看到添加标签的选项，在这里我选择了新建书签将这些网页分类到特定的项目中去，这将大大提高我们的搜索效率。 照片照片这一栏可以将自己的照片上传，上传的过程可以选择默认压缩或者原图，这时候探记就成为你的云端相册了。 记账系统上方的菜单图标提供了细分的消费类别，我们可以清晰地选择类别记录自己的花销情况。 右侧选择收入可以记录自己相应的收入情况： 在备注里你可以详细的说明收入或消费的具体情况。 图表化展示你的账单： 待办清单选择你的待办事项，在下侧选择具体的开始时间与结束时间，同时点击箭头可设置待办事项的优先级： 最终效果： 对于待办事项，你可以在右上角的日历里直接添加，同时也可以看到你所设置的待办事项在四象限中的分布。 目标习惯用户可自定义习惯目标选项，也可方便的从提供的模板里选择日常习惯中譬如早睡，喝水等之类直接应用选择循环天数与具体时间: 在这里的目标关联可以将其他选项联系起来，形成记录的一个简短关系链条。 日子日子里，你可以选择一些重要的日期以使你铭记，很重要的你可以选择记录同学的生日，或者考试或其他重要的日期，倒计时是一个很实用的功能。 身体数据记录你的身高，体重情况，更多的你也可以记录头围，腰围等身体数据，它将帮助你记忆减肥历程中身体的各项数据变化情况，同时该软件也给出了你的运动状况。 以上是该APP现阶段所拥有的功能展示，在探记主页，动态如你的专属朋友圈一样展示出了你各种类型的数据记录，你可以以信息流的方式回顾你的一天，一周，一月~ 我们每天都在经历新鲜的环境与事物：看见天空中变幻的云彩，听见雨水撞击池塘，嗅见大雨过后草木的清香。我们也在不断地错过与遗忘，如果我脚色匆匆，什么都顾不得，什么都没记录下，我不知道我所经历的过去的含义，那我会失去我么？ 我们需要记录自己的印迹，无论是以怎样的形式，这样我们在这个世界才不会时时茫然无所适从。走远方，探索着，记录着，我们都是自己的见证者。 期待你与探记的邂逅。","categories":[{"name":"安卓软件","slug":"安卓软件","permalink":"https://freedgw.github.io/categories/安卓软件/"}],"tags":[{"name":"APP","slug":"APP","permalink":"https://freedgw.github.io/tags/APP/"},{"name":"习惯","slug":"习惯","permalink":"https://freedgw.github.io/tags/习惯/"}]},{"title":"正则表达式","slug":"正则表达式","date":"2019-08-19T16:00:00.000Z","updated":"2019-08-20T13:29:47.446Z","comments":true,"path":"2019/08/20/正则表达式/","link":"","permalink":"https://freedgw.github.io/2019/08/20/正则表达式/","excerpt":"正则表达式(Regular Expression)是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。","text":"正则表达式(Regular Expression)是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。 正则表达式正则表达式(Regular Expression)是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。许多程序设计语言都支持利用正则表达式进行字符串操作。 为什么使用正则表达式？典型的搜索和替换操作要求您提供与预期的搜索结果匹配的确切文本。虽然这种技术对于对静态文本执行简单搜索和替换任务可能已经足够了，但它缺乏灵活性，若采用这种方法搜索动态文本，即使不是不可能，至少也会变得很困难。通过使用正则表达式，可以： 测试字符串内的模式。例如，可以测试输入字符串，以查看字符串内是否出现电话号码模式或信用卡号码模式。这称为数据验证。 替换文本。可以使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本替换它。 基于模式匹配从字符串中提取子字符串。可以查找文档内或输入域内特定的文本。 例如，您可能需要搜索整个网站，删除过时的材料，以及替换某些 HTML 格式标记。在这种情况下，可以使用正则表达式来确定在每个文件中是否出现该材料或该 HTML 格式标记。此过程将受影响的文件列表缩小到包含需要删除或更改的材料的那些文件。然后可以使用正则表达式来删除过时的材料。最后，可以使用正则表达式来搜索和替换标记。 语法正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。例如： runoo+b，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。 runoo*b，可以匹配 runob、runoob、runoooooob 等，* 号代表字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。 colou?r 可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0次、或1次）。 构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。 普通字符普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。 非打印字符非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列： 字符 描述 \\cx 匹配由x指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。 \\f 匹配一个换页符。等价于 \\x0c 和 \\cL。 \\n 匹配一个换行符。等价于 \\x0a 和 \\cJ。 \\r 匹配一个回车符。等价于 \\x0d 和 \\cM。 \\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。注意 Unicode 正则表达式会匹配全角空格符。 \\S 匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。 \\t 匹配一个制表符。等价于 \\x09 和 \\cI。 \\v 匹配一个垂直制表符。等价于 \\x0b 和 \\cK。 特殊字符所谓特殊字符，就是一些有特殊含义的字符，如上面说的 runoo*b 中的 *，简单的说就是表示任何字符串的意思。如果要查找字符串中的 * 符号，则需要对 *** 进行转义，即在其前加一个 **\\: runo*ob 匹配 runoob。许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符*** 放在它们前面。下表列出了正则表达式中的特殊字符： 特别字符 描述 $ 匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\\n’ 或 ‘\\r’。要匹配 $ 字符本身，请使用 \\$。 ( ) 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \\( 和 \\)。 * 匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \\*。 + 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \\+。 . 匹配除换行符 \\n 之外的任何单字符。要匹配 . ，请使用 \\. 。 [ 标记一个中括号表达式的开始。要匹配 [，请使用 \\[。 ? 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \\?。 \\ 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\\n’ 匹配换行符。序列 ‘\\\\‘ 匹配 “\\“，而 ‘\\(‘ 则匹配 “(“。 ^ 匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 \\^。 { 标记限定符表达式的开始。要匹配 {，请使用 \\{。 &#124; 指明两项之间的一个选择。要匹配 &#124;，请使用 \\&#124;。 限定符限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 *** 或 **+ 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。正则表达式的限定符有： 字符 描述 * 匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。 + 匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。 ? 匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。 {n} n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。 {n,} n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。 {n,m} m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。 由于章节编号在大的输入文档中会很可能超过九，所以您需要一种方式来处理两位或三位章节编号。限定符给您这种能力。下面的正则表达式匹配编号为任何位数的章节标题：/Chapter [1-9][0-9]/请注意，限定符出现在范围表达式之后。因此，它应用于整个范围表达式，在本例中，只指定从 0 到 9 的数字（包括 0 和 9）。这里不使用 + 限定符，因为在第二个位置或后面的位置不一定需要有一个数字。也不使用 ? 字符，因为使用 ? 会将章节编号限制到只有两位数。您需要至少匹配 Chapter 和空格字符后面的一个数字。如果您知道章节编号被限制为只有 99 章，可以使用下面的表达式来至少指定一位但至多两位数字。/Chapter [0-9]{1,2}/上面的表达式的缺点是，大于 99 的章节编号仍只匹配开头两位数字。另一个缺点是 Chapter 0 也将匹配。只匹配两位数字的更好的表达式如下：/Chapter [1-9][0-9]?/或/Chapter [1-9][0-9]{0,1}/*、+限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配。例如，您可能搜索 HTML 文档，以查找括在 H1 标记内的章节标题。该文本在您的文档中如下：Chapter 1 - 介绍正则表达式贪婪：下面的表达式匹配从开始小于符号 (&lt;) 到关闭 H1 标记的大于符号 (&gt;) 之间的所有内容。/&lt;.&gt;/非贪婪：如果您只需要匹配开始和结束 H1 标签，下面的非贪婪表达式只匹配 。/&lt;.?&gt;/如果只想匹配开始的 H1 标签，表达式则是：/&lt;\\w+?&gt;/通过在 ****、+ 或 ? 限定符之后放置 ?，该表达式从”贪心”表达式转换为”非贪心”表达式或者最小匹配。 定位符定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。定位符用来描述字符串或单词的边界，^ 和 $ 分别指字符串的开始与结束，\\b 描述单词的前或后边界，\\B 表示非单词边界。正则表达式的定位符有： 字符 描述 ^ 匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \\n 或 \\r 之后的位置匹配。 $ 匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \\n 或 \\r 之前的位置匹配。 \\b 匹配一个单词边界，即字与空格间的位置。 \\B 非单词边界匹配。 注意：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 ^* 之类的表达式。若要匹配一行文本开始处的文本，请在正则表达式的开始使用 ^ 字符。不要将 ^ 的这种用法与中括号表达式内的用法混淆。若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 $ 字符。若要在搜索章节标题时使用定位点，下面的正则表达式匹配一个章节标题，该标题只包含两个尾随数字，并且出现在行首：/^Chapter [1-9][0-9]{0,1}/真正的章节标题不仅出现行的开始处，而且它还是该行中仅有的文本。它即出现在行首又出现在同一行的结尾。下面的表达式能确保指定的匹配只匹配章节而不匹配交叉引用。通过创建只匹配一行文本的开始和结尾的正则表达式，就可做到这一点。/^Chapter [1-9][0-9]{0,1}$/匹配单词边界稍有不同，但向正则表达式添加了很重要的能力。单词边界是单词和空格之间的位置。非单词边界是任何其他位置。下面的表达式匹配单词 Chapter 的开头三个字符，因为这三个字符出现在单词边界后面：/\\bCha/\\b 字符的位置是非常重要的。如果它位于要匹配的字符串的开始，它在单词的开始处查找匹配项。如果它位于字符串的结尾，它在单词的结尾处查找匹配项。例如，下面的表达式匹配单词 Chapter 中的字符串 ter，因为它出现在单词边界的前面：/ter\\b/下面的表达式匹配 Chapter 中的字符串 apt，但不匹配 aptitude 中的字符串 apt：/\\Bapt/字符串 apt 出现在单词 Chapter 中的非单词边界处，但出现在单词 aptitude 中的单词边界处。对于 \\B 非单词边界运算符，位置并不重要，因为匹配不关心究竟是单词的开头还是结尾。 选择用圆括号将所有选择项括起来，相邻的选择项之间用|分隔。但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用?:放在第一个选项前来消除这种副作用。其中 ?: 是非捕获元之一，还有两个非捕获元是 ?= 和 ?!，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。 反向引用对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 \\n 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。可以使用非捕获元字符 ?:、?= 或 ?! 来重写捕获，忽略对相关匹配的保存。反向引用的最简单的、最有用的应用之一，是提供查找文本中两个相同的相邻单词的匹配项的能力。以下面的句子为例：Is is the cost of of gasoline going up up?上面的句子很显然有多个重复的单词。如果能设计一种方法定位该句子，而不必查找每个单词的重复出现，那该有多好。下面的正则表达式使用单个子表达式来实现这一点： 实例查找重复的单词： 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;script&gt;var str = \"Is is the cost of of gasoline going up up\";var patt1 = /\\b([a-z]+) \\1\\b/ig;document.write(str.match(patt1));&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 1Is is,of of,up up 捕获的表达式，正如 [a-z]+ 指定的，包括一个或多个字母。正则表达式的第二部分是对以前捕获的子匹配项的引用，即，单词的第二个匹配项正好由括号表达式匹配。\\1 指定第一个子匹配项。单词边界元字符确保只检测整个单词。否则，诸如 “is issued” 或 “this is” 之类的词组将不能正确地被此表达式识别。正则表达式后面的全局标记 g 指定将该表达式应用到输入字符串中能够查找到的尽可能多的匹配。表达式的结尾处的不区分大小写 i 标记指定不区分大小写。 元字符 字符 描述 \\ 将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\\n’ 匹配一个换行符。序列 ‘\\‘ 匹配 “&quot; 而 “(“ 则匹配 “(“。 ^ 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\\n’ 或 ‘\\r’ 之后的位置。 $ 匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\\n’ 或 ‘\\r’ 之前的位置。 * 匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。 + 匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。 ? 匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。 {n} n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。 {n,} n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。 {n,m} m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。 ? 当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。 . 匹配除换行符（\\n、\\r）之外的任何单个字符。要匹配包括 ‘\\n’ 在内的任何字符，请使用像”**(. (pattern) 匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。 (?:pattern) 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 ( (?=pattern) 正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，”Windows(?=95 (?!pattern) 正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如”Windows(?!95 (?&lt;=pattern) 反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”`(?&lt;=95 (?&lt;!pattern) 反向否定预查，与正向否定预查类似，只是方向相反。例如”`(?&lt;!95 x&#124;y 匹配 x 或 y。例如，’z [xyz] 字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。 [^xyz] 负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。 [a-z] 字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。 [^a-z] 负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。 \\b 匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。 \\B 匹配非单词边界。’er\\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。 \\cx 匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。 \\d 匹配一个数字字符。等价于 [0-9]。 \\D 匹配一个非数字字符。等价于 [^0-9]。 \\f 匹配一个换页符。等价于 \\x0c 和 \\cL。 \\n 匹配一个换行符。等价于 \\x0a 和 \\cJ。 \\r 匹配一个回车符。等价于 \\x0d 和 \\cM。 \\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。 \\S 匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。 \\t 匹配一个制表符。等价于 \\x09 和 \\cI。 \\v 匹配一个垂直制表符。等价于 \\x0b 和 \\cK。 \\w 匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。 \\W 匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。 \\xn 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\\x41’ 匹配 “A”。’\\x041’ 则等价于 ‘\\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。 \\num 匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\\1’ 匹配两个连续的相同字符。 \\n 标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。 \\nm 标识一个八进制转义值或一个向后引用。如果 \\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \\nm 将匹配八进制转义值 nm。 \\nml 如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。 \\un 匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \\u00A9 匹配版权符号 (?)。 运算符优先级正则表达式从左到右进行计算，并遵循优先级顺序，这与算术表达式非常类似。相同优先级的从左到右进行运算，不同优先级的运算先高后低。下表从最高到最低说明了各种正则表达式运算符的优先级顺序： 运算符 描述 \\ 转义符 (), (?:), (?=), [] 圆括号和方括号 *, +, ?, {n}, {n,}, {n,m} 限定符 ^, $, \\任何元字符、任何字符 定位点和序列（即：位置和顺序） &#124; 替换，”或”操作 字符具有高于替换运算符的优先级，使得”m&#124;food”匹配”m”或”food”。若要匹配”mood”或”food”，请使用括号创建子表达式，从而产生”(m&#124;f)ood”。 匹配规则一切从最基本的开始。模式，是正则表达式最基本的元素，它们是一组描述字符串特征的字符。模式可以很简单，由普通的字符串组成，也可以非常复杂，往往用特殊的字符表示一个范围内的字符、重复出现，或表示上下文。例如：^once这个模式包含一个特殊的字符^，表示该模式只匹配那些以once开头的字符串。例如该模式与字符串”once upon a time”匹配，与”There once was a man from NewYork”不匹配。正如如^符号表示开头一样，$符号用来匹配那些以给定模式结尾的字符串。bucket$这个模式与”Who kept all of this cash in a bucket”匹配，与”buckets”不匹配。字符 ^ 和 $ 同时使用时，表示精确匹配（字符串与模式一样）。例如：^bucket$只匹配字符串”bucket”。如果一个模式不包括^和$，那么它与任何包含该模式的字符串匹配。例如：模式once与字符串There once was a man from NewYorkWho kept all of his cash in a bucket.是匹配的。在该模式中的字母(o-n-c-e)是字面的字符，也就是说，他们表示该字母本身，数字也是一样的。其他一些稍微复杂的字符，如标点符号和白字符（空格、制表符等），要用到转义序列。所有的转义序列都用反斜杠()打头。制表符的转义序列是 \\t。所以如果我们要检测一个字符串是否以制表符开头，可以用这个模式：^\\t类似的，用\\n表示”新行”，\\r表示回车。其他的特殊符号，可以用在前面加上反斜杠，如反斜杠本身用\\表示，句号.用.表示，以此类推。 字符簇在INTERNET的程序中，正则表达式通常用来验证用户的输入。当用户提交一个FORM以后，要判断输入的电话号码、地址、EMAIL地址、信用卡号码等是否有效，用普通的基于字面的字符是不够的。所以要用一种更自由的描述我们要的模式的办法，它就是字符簇。要建立一个表示所有元音字符的字符簇，就把所有的元音字符放在一个方括号里：[AaEeIiOoUu]这个模式与任何元音字符匹配，但只能表示一个字符。用连字号可以表示一个字符的范围，如：[a-z] //匹配所有的小写字母[A-Z] //匹配所有的大写字母[a-zA-Z] //匹配所有的字母[0-9] //匹配所有的数字[0-9.-] //匹配所有的数字，句号和减号[ \\f\\r\\t\\n] //匹配所有的白字符同样的，这些也只表示一个字符，这是一个非常重要的。如果要匹配一个由一个小写字母和一位数字组成的字符串，比如”z2”、”t6”或”g7”，但不是”ab2”、”r2d3” 或”b52”的话，用这个模式：^[a-z][0-9]$尽管[a-z]代表26个字母的范围，但在这里它只能与第一个字符是小写字母的字符串匹配。前面曾经提到^表示字符串的开头，但它还有另外一个含义。当在一组方括号里使用 ^ 时，它表示”非“或”排除“的意思，常常用来剔除某个字符。还用前面的例子，我们要求第一个字符不能是数字：^[^0-9][0-9]$这个模式与”&amp;5”、”g7”及”-2”是匹配的，但与”12”、”66”是不匹配的。下面是几个排除特定字符的例子：[^a-z] //除了小写字母以外的所有字符[^\\/^] //除了()(/)(^)之外的所有字符[^&quot;&#39;] //除了双引号(“)和单引号(‘)之外的所有字符特殊字符 .(点，句号)在正则表达式中用来表示除了”新行”之外的所有字符。所以模式 ^.5$ 与任何两个字符的、以数字5结尾和以其他非”新行”字符开头的字符串匹配。模式 . 可以匹配任何字符串，除了空串和只包括一个“新行”的字符串。 确定重复出现到现在为止，你已经知道如何去匹配一个字母或数字，但更多的情况下，可能要匹配一个单词或一组数字。一个单词有若干个字母组成，一组数字有若干个单数组成。跟在字符或字符簇后面的花括号({})用来确定前面的内容的重复出现的次数。 字符簇 描述 ^[a-zA-Z_]$ 所有的字母和下划线 ^[[:alpha:]]{3}$ 所有的3个字母的单词 ^a$ 字母a ^a{4}$ aaaa ^a{2,4}$ aa,aaa或aaaa ^a{1,3}$ a,aa或aaa ^a{2,}$ 包含多于两个a的字符串 ^a{2,} 如：aardvark和aaab，但apple不行 a{2,} 如：baad和aaa，但Nantucket不行 \\t{2} 两个制表符 .{2} 所有的两个字符 这些例子描述了花括号的三种不同的用法。一个数字 {x} **的意思是前面的字符或字符簇只出现x次* ；一个数字加逗号 {x,} 的意思是前面的内容出现x或更多的次数 ；两个数字用逗号分隔的数字 {x,y} 表示 前面的内容至少出现x次，但不超过y次。我们可以把模式扩展到更多的单词或数字：^[a-zA-Z0-9_]{1,}$ // 所有包含一个以上的字母、数字或下划线的字符串^[1-9][0-9]{0,}$ // 所有的正整数^-{0,1}[0-9]{1,}$ // 所有的整数^[-]?[0-9]+.?[0-9]+$ // 所有的浮点数最后一个例子不太好理解，是吗？这么看吧：以一个可选的负号 ([-]?) 开头 (^)、跟着1个或更多的数字([0-9]+)、和一个小数点(.)再跟上1个或多个数字([0-9]+)，并且后面没有其他任何东西($)。下面你将知道能够使用的更为简单的方法。特殊字符 ? 与 {0,1} 是相等的，它们都代表着： 0个或1个前面的内容 或 前面的内容是可选的 。所以刚才的例子可以简化为：^-?[0-9]{1,}.?[0-9]{1,}$特殊字符 *** 与 **{0,} 是相等的，它们都代表着 0 个或多个前面的内容 。最后，字符 + 与 {1,} 是相等的，表示 1 个或多个前面的内容 ，所以上面的4个例子可以写成：^[a-zA-Z0-9_]+$ // 所有包含一个以上的字母、数字或下划线的字符串^[1-9][0-9]$ // 所有的正整数^-?[0-9]+$ // 所有的整数^[-]?[0-9]+(.[0-9]+)?$ // 所有的浮点数 简单表达式正则表达式的最简单形式是在搜索字符串中匹配其本身的单个普通字符。例如，单字符模式，如 A，不论出现在搜索字符串中的何处，它总是匹配字母 A。下面是一些单字符正则表达式模式的示例：/a//7//M/可以将许多单字符组合起来以形成大的表达式。例如，以下正则表达式组合了单字符表达式：a、7 和 M。/a7M/请注意，没有串联运算符。只须在一个字符后面键入另一个字符。 字符匹配句点 (.) 匹配字符串中的各种打印或非打印字符，只有一个字符例外。这个例外就是换行符 (\\n)。下面的正则表达式匹配 aac、abc、acc、adc 等等，以及 a1c、a2c、a-c 和 a#c：/a.c/若要匹配包含文件名的字符串，而句点 (.) 是输入字符串的组成部分，请在正则表达式中的句点前面加反斜杠 () 字符。举例来说明，下面的正则表达式匹配 filename.ext：/filename.ext/这些表达式只让您匹配”任何”单个字符。可能需要匹配列表中的特定字符组。例如，可能需要查找用数字表示的章节标题（Chapter 1、Chapter 2 等等）。 中括号表达式若要创建匹配字符组的一个列表，请在方括号（[ 和 ]）内放置一个或更多单个字符。当字符括在中括号内时，该列表称为”中括号表达式”。与在任何别的位置一样，普通字符在中括号内表示其本身，即，它在输入文本中匹配一次其本身。大多数特殊字符在中括号表达式内出现时失去它们的意义。不过也有一些例外，如： 如果 ] 字符不是第一项，它结束一个列表。若要匹配列表中的 ] 字符，请将它放在第一位，紧跟在开始 [ 后面。 \\ 字符继续作为转义符。若要匹配 \\ 字符，请使用 \\。 括在中括号表达式中的字符只匹配处于正则表达式中该位置的单个字符。以下正则表达式匹配 Chapter 1、Chapter 2、Chapter 3、Chapter 4 和 Chapter 5：/Chapter [12345]/请注意，单词 Chapter 和后面的空格的位置相对于中括号内的字符是固定的。中括号表达式指定的只是匹配紧跟在单词 Chapter 和空格后面的单个字符位置的字符集。这是第九个字符位置。若要使用范围代替字符本身来表示匹配字符组，请使用连字符 (-) 将范围中的开始字符和结束字符分开。单个字符的字符值确定范围内的相对顺序。下面的正则表达式包含范围表达式，该范围表达式等效于上面显示的中括号中的列表。/Chapter [1-5]/当以这种方式指定范围时，开始值和结束值两者都包括在范围内。注意，还有一点很重要，按 Unicode 排序顺序，开始值必须在结束值的前面。若要在中括号表达式中包括连字符，请采用下列方法之一： 用反斜杠将它转义： [-] 将连字符放在中括号列表的开始或结尾。下面的表达式匹配所有小写字母和连字符： [-a-z][a-z-] 创建一个范围，在该范围中，开始字符值小于连字符，而结束字符值等于或大于连字符。下面的两个正则表达式都满足这一要求： [!–][!-~]若要查找不在列表或范围内的所有字符，请将插入符号 (^) 放在列表的开头。如果插入字符出现在列表中的其他任何位置，则它匹配其本身。下面的正则表达式匹配1、2、3、4 或 5 之外的任何数字和字符：/Chapter [^12345]/在上面的示例中，表达式在第九个位置匹配 1、2、3、4 或 5 之外的任何数字和字符。这样，例如，Chapter 7 就是一个匹配项，Chapter 9 也是一个匹配项。上面的表达式可以使用连字符 (-) 来表示：/Chapter [^1-5]/中括号表达式的典型用途是指定任何大写或小写字母或任何数字的匹配。下面的表达式指定这样的匹配：/[A-Za-z0-9]/ 替换和分组替换使用 | 字符来允许在两个或多个替换选项之间进行选择。例如，可以扩展章节标题正则表达式，以返回比章标题范围更广的匹配项。但是，这并不象您可能认为的那样简单。替换匹配 | 字符任一侧最大的表达式。您可能认为，下面的表达式匹配出现在行首和行尾、后面跟一个或两个数字的 Chapter 或 Section：/^Chapter|Section [1-9][0-9]{0,1}$/很遗憾，上面的正则表达式要么匹配行首的单词 Chapter，要么匹配行尾的单词 Section 及跟在其后的任何数字。如果输入字符串是 Chapter 22，那么上面的表达式只匹配单词 Chapter。如果输入字符串是 Section 22，那么该表达式匹配 Section 22。若要使正则表达式更易于控制，可以使用括号来限制替换的范围，即，确保它只应用于两个单词 Chapter 和 Section。但是，括号也用于创建子表达式，并可能捕获它们以供以后使用，这一点在有关反向引用的那一节讲述。通过在上面的正则表达式的适当位置添加括号，就可以使该正则表达式匹配 Chapter 1 或 Section 3。下面的正则表达式使用括号来组合 Chapter 和 Section，以便表达式正确地起作用：/^(Chapter|Section) [1-9][0-9]{0,1}$/尽管这些表达式正常工作，但 Chapter|Section 周围的括号还将捕获两个匹配字中的任一个供以后使用。由于在上面的表达式中只有一组括号，因此，只有一个被捕获的”子匹配项”。在上面的示例中，您只需要使用括号来组合单词 Chapter 和 Section 之间的选择。若要防止匹配被保存以备将来使用，请在括号内正则表达式模式之前放置 ?:。下面的修改提供相同的能力而不保存子匹配项：/^(?:Chapter|Section) [1-9][0-9]{0,1}$/除 ?: 元字符外，两个其他非捕获元字符创建被称为”预测先行”匹配的某些内容。正向预测先行使用 ?= 指定，它匹配处于括号中匹配正则表达式模式的起始点的搜索字符串。反向预测先行使用 ?! 指定，它匹配处于与正则表达式模式不匹配的字符串的起始点的搜索字符串。例如，假设您有一个文档，该文档包含指向 Windows 3.1、Windows 95、Windows 98 和 Windows NT 的引用。再进一步假设，您需要更新该文档，将指向 Windows 95、Windows 98 和 Windows NT 的所有引用更改为 Windows 2000。下面的正则表达式（这是一个正向预测先行的示例）匹配 Windows 95、Windows 98 和 Windows NT：/Windows(?=95 |98 |NT )/找到一处匹配后，紧接着就在匹配的文本（不包括预测先行中的字符）之后搜索下一处匹配。例如，如果上面的表达式匹配 Windows 98，将在 Windows 之后而不是在 98 之后继续搜索。 其他示例下面列出一些正则表达式示例： 正则表达式 描述 /\\b([a-z]+) \\1\\b/gi 一个单词连续出现的位置。 /(\\w+):\\/\\/([^/:]+)(:\\d)?([^# ])/ 将一个URL解析为协议、域、端口及相对路径。 /^(?:Chapter&#124;Section) [1-9][0-9]{0,1}$/ 定位章节的位置。 /[-a-z]/ a至z共26个字母再加一个-号。 /ter\\b/ 可匹配chapter，而不能匹配terminal。 /\\Bapt/ 可匹配chapter，而不能匹配aptitude。 /Windows(?=95 &#124;98 &#124;NT )/ 可匹配Windows95或Windows98或WindowsNT，当找到一个匹配后，从Windows后面开始进行下一次的检索匹配。 /^\\s*$/ 匹配空行。 /\\d{2}-\\d{5}/ 验证由两位数字、一个连字符再加 5 位数字组成的 ID 号。 /&lt;\\s(\\S+)(\\s[^&gt;])?&gt;[\\s\\S]*&lt;\\s\\/\\1\\s&gt;/ 匹配 HTML 标记。 常用正则表达式 用户名 /^[a-z0-9_-]{3,16}$/ 密码 /^[a-z0-9_-]{6,18}$/ 十六进制值 /^#?([a-f0-9]{6}&#124;[a-f0-9]{3})$/ 电子邮箱 /^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$/ /^[a-z\\d]+(\\.[a-z\\d]+)*@(\\da-z?)+(\\.{1,2}[a-z]+)+$/ URL /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-])\\/?$/ IP 地址 /((2[0-4]\\d&#124;25[0-5]&#124;[01]?\\d\\d?)\\.){3}(2[0-4]\\d&#124;25[0-5]&#124;[01]?\\d\\d?)/ /^(?:(?:25[0-5]&#124;2[0-4][0-9]&#124;[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]&#124;2[0-4][0-9]&#124;[01]?[0-9][0-9]?)$/ HTML 标签 /^&lt;([a-z]+)([^&lt;]+)(?:&gt;(.)&lt;\\/\\1&gt;&#124;\\s+\\/&gt;)$/ 删除代码\\\\注释 (?&lt;!http:&#124;\\S)//.*$ Unicode编码中的汉字范围 /^[\\u2E80-\\u9FFF]+$/ 附录 最常用表达式整理一、校验数字的表达式 1 数字：^[0-9]$ 2 n位的数字：^\\d{n}$ 3 至少n位的数字：^\\d{n,}$ 4 m-n位的数字：^\\d{m,n}$ 5 零和非零开头的数字：^(0|[1-9][0-9])$ 6 非零开头的最多带两位小数的数字：^([1-9][0-9])+(.[0-9]{1,2})?$ 7 带1-2位小数的正数或负数：^(-)?\\d+(.\\d{1,2})?$ 8 正数、负数、和小数：^(-|+)?\\d+(.\\d+)?$ 9 有两位小数的正实数：^[0-9]+(.[0-9]{2})?$10 有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$11 非零的正整数：^[1-9]\\d$ 或 ^([1-9][0-9]){1,3}$ 或 ^+?[1-9][0-9]$12 非零的负整数：^-[1-9][]0-9”$ 或 ^-[1-9]\\d$13 非负整数：^\\d+$ 或 ^[1-9]\\d|0$14 非正整数：^-[1-9]\\d|0$ 或 ^((-\\d+)|(0+))$15 非负浮点数：^\\d+(.\\d+)?$ 或 ^[1-9]\\d.\\d|0.\\d[1-9]\\d|0?.0+|0$16 非正浮点数：^((-\\d+(.\\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\\d.\\d|0.\\d[1-9]\\d))|0?.0+|0$17 正浮点数：^[1-9]\\d.\\d|0.\\d[1-9]\\d$ 或 ^(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9]*.[0-9]+)|([0-9][1-9][0-9]))$18 负浮点数：^-([1-9]\\d*.\\d|0.\\d[1-9]\\d)$ 或 ^(-(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9]*.[0-9]+)|([0-9][1-9][0-9])))$19 浮点数：^(-?\\d+)(.\\d+)?$ 或 ^-?([1-9]\\d*.\\d|0.\\d[1-9]\\d|0?.0+|0)$二、校验字符的表达式 1 汉字：^[\\u4e00-\\u9fa5]{0,}$ 2 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$ 3 长度为3-20的所有字符：^.{3,20}$ 4 由26个英文字母组成的字符串：^[A-Za-z]+$ 5 由26个大写英文字母组成的字符串：^[A-Z]+$ 6 由26个小写英文字母组成的字符串：^[a-z]+$ 7 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$ 8 由数字、26个英文字母或者下划线组成的字符串：^\\w+$ 或 ^\\w{3,20}$ 9 中文、英文、数字包括下划线：^[\\u4E00-\\u9FA5A-Za-z0-9_]+$10 中文、英文、数字但不包括下划线等符号：^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$11 可以输入含有^%&amp;’,;=?$&quot;等字符：[^%&amp;’,;=?$\\x22]+12 禁止输入含有的字符：[^\\x22]+三、特殊需求表达式 1 Email地址：^\\w+([-+.]\\w+)@\\w+([-.]\\w+)*.\\w+([-.]\\w+)$ 2 域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.? 3 InternetURL：[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+.)+[\\w-]+(/[\\w-./?%&amp;=])?$ 4 手机号码：^(13[0-9]|14[0-9]|15[0-9]|16[0-9]|17[0-9]|18[0-9]|19[0-9])\\d{8}$ (由于工信部放号段不定时，所以建议使用泛解析 ^([1][3,4,5,6,7,8,9])\\d{9}$) 5 电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$ 6 国内电话号码(0511-4405222、021-87888822)：\\d{3}-\\d{8}|\\d{4}-\\d{7} 7 18位身份证号码(数字、字母x结尾)：^((\\d{18})|([0-9x]{18})|([0-9X]{18}))$ 8 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 9 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w{5,17}$10 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\\d)(?=.[a-z])(?=.[A-Z]).{8,10}$11 日期格式：^\\d{4}-\\d{1,2}-\\d{1,2}12 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$13 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$14 钱的输入格式：15 1.有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]$16 2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：^(0|[1-9][0-9])$17 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9])$18 4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$19 5.必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$20 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$21 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})(.[0-9]{1,2})?$22 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3}))(.[0-9]{1,2})?$23 备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里24 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$25 中文字符的正则表达式：[\\u4e00-\\u9fa5]26 双字节字符：[^\\x00-\\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))27 空白行的正则表达式：\\n\\s\\r (可以用来删除空白行)28 HTML标记的正则表达式：&lt;(\\S?)[^&gt;]&gt;.?&lt;/\\1&gt;|&lt;.? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)29 首尾空白字符的正则表达式：^\\s|\\s$或(^\\s)|(\\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)30 腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)31 中国邮政编码：[1-9]\\d{5}(?!\\d) (中国邮政编码为6位数字)32 IP地址：\\d+.\\d+.\\d+.\\d+ (提取IP地址时有用)33 IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)) 参考123","categories":[{"name":"实用教程","slug":"实用教程","permalink":"https://freedgw.github.io/categories/实用教程/"}],"tags":[{"name":"效率","slug":"效率","permalink":"https://freedgw.github.io/tags/效率/"},{"name":"编程","slug":"编程","permalink":"https://freedgw.github.io/tags/编程/"}]}]}